package my.package.client.workspace;

import my.package.client.State;

import com.codenvy.editor.api.editor.EditorState;
import com.codenvy.editor.api.editor.SelectionManager;
import com.codenvy.editor.api.editor.elements.Link;
import com.codenvy.editor.api.editor.elements.Shape;
import com.codenvy.editor.api.editor.workspace.AbstractWorkspacePresenter;
import com.codenvy.editor.api.editor.workspace.AbstractWorkspaceView;
import com.google.inject.Inject;
import com.google.inject.assistedinject.Assisted;

import javax.annotation.Nonnull;

import my.package.client.elements.MainElement;
import my.package.client.elements.Element1;
import my.package.client.elements.Element2;
import my.package.client.elements.Connection1;

import static my.package.client.State.CREATING_NOTHING;
import static my.package.client.State.CREATING_ELEMENT1;
import static my.package.client.State.CREATING_ELEMENT2;
import static my.package.client.State.CREATING_CONNECTION1_SOURCE;
import static my.package.client.State.CREATING_CONNECTION1_TARGET;

public class WorkspacePresenter extends AbstractWorkspacePresenter<State> {

    @Inject
    public WorkspacePresenter(WorkspaceView view, @Assisted EditorState<State> state, @Assisted SelectionManager selectionManager) {
        super(view, state, new MainElement(), selectionManager);
    }

    /** {@inheritDoc} */
    @Override
    public void onLeftMouseButtonClicked(int x, int y) {
        selectionManager.setElement(null);
        ((AbstractWorkspaceView)view).setZoomInButtonEnable(false);

        switch (getState()) {
            case CREATING_ELEMENT1:
                Element1 element1 = new Element1();

                ((WorkspaceView)view).addElement1(x, y, element1);
                addShape(element1, x, y);

                setState(CREATING_NOTHING);
                break;
            case CREATING_ELEMENT2:
                Element2 element2 = new Element2();

                ((WorkspaceView)view).addElement2(x, y, element2);
                addShape(element2, x, y);

                setState(CREATING_NOTHING);
                break;
        }
    }

    /** {@inheritDoc} */
    @Override
    public void onDiagramElementClicked(@Nonnull String elementId) {
        String prevSelectedElement = selectedElement;
        selectedElement = elementId;

        Shape element = (Shape)elements.get(elementId);
        selectionManager.setElement(element);

        ((AbstractWorkspaceView)view).setZoomInButtonEnable(element.isContainer());

        Shape source;
        Shape parent;

        switch (getState()) {
            case CREATING_CONNECTION1_SOURCE:
                setState(CREATING_CONNECTION1_TARGET);
                break;
            case CREATING_CONNECTION1_TARGET:
                ((WorkspaceView)view).addConnection1(prevSelectedElement, selectedElement);
                source = (Shape)elements.get(prevSelectedElement);
                Connection1 connection1 = new Connection1(source.getId(), element.getId());
                elements.put(element.getId(), element);

                parent = source.getParent();
                if (parent != null) {
                    parent.addLink(connection1);
                }
                setState(CREATING_NOTHING);

                notifyDiagramChangeListeners();
                break;
        }
    }

    @Override
    protected void showElements(@Nonnull Shape element) {
        ((AbstractWorkspaceView)view).clearDiagram();

        nodeElement = element;
        Shape selectedElement = null;

        ((AbstractWorkspaceView)view).setZoomOutButtonEnable(nodeElement.getParent() != null);
        ((AbstractWorkspaceView)view).setAutoAlignmentParam(nodeElement.isAutoAligned());

        int defaultX = 100;
        int defaultY = 100;

        for (Shape shape : nodeElement.getShapes()) {
            int x = shape.getX();
            int y = shape.getY();

            if (x == Shape.UNDEFINED_POSITION || nodeElement.isAutoAligned()) {
                x = defaultX;
                defaultX += 100;
            }

            if (y == Shape.UNDEFINED_POSITION || nodeElement.isAutoAligned()) {
                y = defaultY;
            }

            if (shape instanceof Element1) {
                ((WorkspaceView)view).addElement1(x, y, (Element1)shape);
            }
            if (shape instanceof Element2) {
                ((WorkspaceView)view).addElement2(x, y, (Element2)shape);
            }

            shape.setX(x);
            shape.setY(y);

            if (shape.getId().equals(this.selectedElement)) {
                selectedElement = shape;
            }

            elements.put(shape.getId(), shape);
        }

        selectionManager.setElement(selectedElement);
        ((AbstractWorkspaceView)view).setZoomInButtonEnable(selectedElement != null && selectedElement.isContainer());
        this.selectedElement = selectedElement != null ? selectedElement.getId() : null;

        for (Link link : mainElement.getLinks()) {
            if (link instanceof Connection1) {
                ((WorkspaceView)view).addConnection1(link.getSource(), link.getTarget());
            }
        }

        notifyMainElementChangeListeners();
    }

}