package my.package.client.elements;

import com.google.gwt.xml.client.Node;
import javax.annotation.Nonnull;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import com.codenvy.editor.api.editor.elements.AbstractShape;
import com.codenvy.editor.api.editor.elements.Element;
import com.codenvy.editor.api.editor.elements.Link;
import com.google.gwt.xml.client.NodeList;
import com.codenvy.editor.api.editor.elements.Shape;

public class MainElement extends AbstractShape {

    public MainElement(@Nonnull String MainElement, @Nonnull List<String> properties, @Nonnull List<String> internalProperties) {
        super(MainElement, properties, internalProperties);
    }

    public MainElement() {
        this("MainElement", new ArrayList<String>(), Arrays.asList("x", "y", "uuid", "autoAlign"));

        components.add("Element1");
        components.add("Element2");
    }

    @Override
    public void deserialize(Node node) {
        NodeList childNodes = node.getChildNodes();

        for (int i = 0; i < childNodes.getLength(); i++) {
            Node item = childNodes.item(i);
            String name = item.getNodeName();

            if (isProperty(name)) {
                applyProperty(item);
            } else {
                Element element = findElement(name);
                element.deserialize(item);

                if (element instanceof Shape) {
                    addShape((Shape)element);
                } else {
                    addLink((Link)element);
                }
            }
        }
    }

    @Override
    public void deserializeInternalFormat(Node node) {
        NodeList childNodes = node.getChildNodes();

        for (int i = 0; i < childNodes.getLength(); i++) {
            Node item = childNodes.item(i);
            String name = item.getNodeName();

            if (isInternalProperty(name)) {
                applyProperty(item);
            } else {
                Element element = findElement(name);
                element.deserializeInternalFormat(item);

                if (element instanceof Shape) {
                    addShape((Shape)element);
                } else {
                    addLink((Link)element);
                }
            }
        }
    }

    private Element findElement(@Nonnull String elementName) {
        switch (elementName) {
            case "Element1":
                return new Element1();
            case "Element2":
                return new Element2();
            case "Connection1":
            default:
                return new Connection1();
        }
    }

    @Override
    protected String serializeProperties() {
        return "";
    }

    @Override
    public void applyProperty(Node node) {
    }

}